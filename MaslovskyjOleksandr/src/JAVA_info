1. SOLID
	S - single responsibility (кожен метод повинен виконувати тільки одну функцію)
	O - open/closed (відкритий для розширення і закритий для зміни)
	L - Barbara Liskov (батьківські класи можуть бути замінені на дочірні, без змін властивостей програми)
	I - Interface Segregation Principle (багато інтерфейсів краще ніж один)
	D - Dependency Inversion Principle (всі залежності будуються на основі абстракцій, абстракції не залежать від деталей)

2. Patterns:
	Strategy/Policy - створення декількох моделей поведінки для одного об'єкта, та винести них в окремі класи
	Factory - приховати створення об'єктів від клієнта
	Proxy - це коли об'єкт перехоплює доступ до іншого об'єкта
	adapter/wrapper/facade - адаптувати несумісні інтерфейси. Наприклад: В нас вже є якись клас який приймає на вхід певний тип.
	    Для того щоб передати йому інший тип треба створити класн пустишку з очікуваним типом, а в ньому посилання на неадаптований клас.
	    Може бути реалізований через наслідування.
	singleton - гарантує створення лише одного об'єкта
